#+title: Doom Emacs config file
#+author: Chop Tr (trchopan)
#+date: <2022-01-26 Wed>


* Default doom setup

Some *functionality* uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq user-full-name "Chop Tr (trchopan)"
      user-mail-address "logan1011001@gmail.com")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-theme 'doom-one)
#+end_src

If youyou use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq org-directory "~/org/")
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq display-line-numbers-type t)
#+end_src

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.


* Automations

Automatic tangle on save

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local)))
#+end_src

Auto break line at 80

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

Maximize the window upon startup.
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq initial-frame-alist '((top . 1) (left . 1) (width . 177) (height . 60)))
;;(add-to-list 'initial-frame-alist '(maximized))
#+end_src


* LSP

** Format-all

If you are in a buffer with lsp-mode enabled and a server that supports
textDocument/formatting, it will be used instead of format-all’s formatter.

- To disable this behavior universally use: (setq +format-with-lsp nil)
- To disable this behavior in one mode: (setq-hook! 'python-mode-hook
  +format-with-lsp nil)

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq +format-with-lsp nil)
#+end_src

The command format-all-ensure-formatter will ensure that a default formatter is
selected in case you don't have one set; you can customize the default formatter
for each language. To ensure a formatter is set whenever you enable
format-all-mode, you can use: (add-hook 'format-all-mode-hook
'format-all-ensure-formatter).

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
#+end_src

** Vue

*** Config

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! lsp-volar)
#+end_src

*** Package

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! lsp-volar :recipe (:host github :repo "jadestrong/lsp-volar"))
#+end_src

** Typescript

*** Config

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el

#+end_src

*** Package

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! ob-typescript)
#+end_src


* Treemacs

** TODO Learn about workspaces and perspectives

Projects are beautifully managed. Can be added with `<C-p><C-p>a` .

Edit workspaces by `treemacs-edit-workspaces`

** Follow-mode

`treemacs-follow-mode` is a global minor mode which allows the treemacs view to
always move its focus to the currently selected file. This mode runs on an idle
timer - the exact duration of inactivity (in seconds) before a move is called is
determined by treemacs-tag-follow-delay.

** Tag-follow-mode

`treemacs-tag-follow-mode` is a global minor mode which extends and effectively
replaces treemacs-follow-mode. When activated it follows not just the current
file, but also the current tag. This works alongside treemacs’ integration with
imenu, so all file types providing an imenu implementation are compatible.

This mode, like `follow-mode`, runs on an idle timer - the exact duration of
inactivity (in seconds) before a move is called is determined by
treemacs-tag-follow-delay.

Note that in order to move to a tag in treemacs the treemacs buffer’s window
needs to be temporarily selected, which will reset `blink-cursor-mode`’s timer
if it is enabled. This will result in the cursor blinking seemingly pausing for
a short time and giving the appearance of the tag follow action lasting much
longer than it really does.

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq treemacs-follow-mode t)
#+end_src


* Avy - Jump mode

avy is a GNU Emacs package for jumping to visible text using a char-based
decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same
idea.

** Config

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(map! :n "<SPC>" #'evil-avy-goto-word-0)
#+end_src

** Package

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! avy)
#+end_src


* Org mode

Insert clipboard image into org

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(defun org-insert-clipboard-image (&optional file)
  (interactive "F")
  (shell-command (concat "pngpaste " file))
  (insert (concat "[[" file "]]"))
  (org-display-inline-images))
#+end_src


* Personal Keymaps

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(map! :n "X" #'kill-current-buffer)
(map! :n "H" #'+tabs:previous-or-goto)
(map! :n "L" #'+tabs:next-or-goto)
(map! :n "`h" #'treemacs-find-file)
#+end_src

* Font display

** Font face

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 13))
#+end_src


** Org pretty mode

Hide emhasis marker and toggles pretty entities.

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src


** Bigger heading

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(custom-set-faces!
  '(org-document-title :height 1.2))
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.25)
  '(outline-2 :weight bold :height 1.15)
  '(outline-3 :weight bold :height 1.12)
  '(outline-4 :weight semi-bold :height 1.09)
  '(outline-5 :weight semi-bold :height 1.06)
  '(outline-6 :weight semi-bold :height 1.03)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))
#+end_src

** Italic quote block

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq org-fontify-quote-and-verse-blocks t)
#+end_src
