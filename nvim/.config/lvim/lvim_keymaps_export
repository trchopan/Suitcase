


x  <C-C>Þ      * <Nop>
x  <C-C>       * <Cmd>lua require("which-key").show("\3", {mode = "v", auto = true})<CR>
v  <C-C>c      * "*y
n  <C-H>       * :BufferMovePrevious<CR>
s  <Tab>       * <Cmd>call v:lua.cmp.utils.keymap.set_map(8)<CR>
n  <NL>        * <C-W>j
n  <C-K>       * <C-W>k
n  <C-L>       * :BufferMoveNext<CR>
n  <C-Q>       * :call QuickFixToggle()<CR>
n  <C-W>Þ      * <Nop>
n  <C-W>       * <Cmd>lua require("which-key").show("\23", {mode = "n", auto = true})<CR>
x  <Space>Þ    * <Nop>
x  <Space>     * <Cmd>lua require("which-key").show(" ", {mode = "v", auto = true})<CR>
n  <Space>LlÞ  * <Nop>
n  <Space>LÞ   * <Nop>
n  <Space>gÞ   * <Nop>
n  <Space>pÞ   * <Nop>
n  <Space>sÞ   * <Nop>
n  <Space>bÞ   * <Nop>
n  <Space>TÞ   * <Nop>
n  <Space>lpÞ  * <Nop>
n  <Space>lÞ   * <Nop>
n  <Space>Þ    * <Nop>
n  <Space>     * <Cmd>lua require("which-key").show(" ", {mode = "n", auto = true})<CR>
v  <Space>/    * <Esc><Cmd>lua require('Comment.api').toggle_linewise_op(vim.fn.visualmode())<CR>
n  <Space>f    * <Cmd>lua require("which-key").execute(1)<CR>
n  <Space>e    * <Cmd>NvimTreeToggle<CR>
n  <Space>bb   * <Cmd>b#<CR>
n  <Space>be   * <Cmd>BufferCloseAllButCurrent<CR>
n  <Space>bw   * <Cmd>BufferWipeout<CR>
n  <Space>bf   * <Cmd>Telescope buffers<CR>
n  <Space>bL   * <Cmd>BufferOrderByLanguage<CR>
n  <Space>bD   * <Cmd>BufferOrderByDirectory<CR>
n  <Space>bj   * <Cmd>BufferPick<CR>
n  <Space>bl   * <Cmd>BufferCloseBuffersRight<CR>
n  <Space>bh   * <Cmd>BufferCloseBuffersLeft<CR>
n  <Space>pi   * <Cmd>PackerInstall<CR>
n  <Space>ps   * <Cmd>PackerSync<CR>
n  <Space>pc   * <Cmd>PackerCompile<CR>
n  <Space>pS   * <Cmd>PackerStatus<CR>
n  <Space>pr   * <Cmd>lua require('lvim.plugin-loader').recompile()<CR>
n  <Space>pu   * <Cmd>PackerUpdate<CR>
n  <Space>c    * <Cmd>BufferClose!<CR>
n  <Space>;    * <Cmd>Dashboard<CR>
n  <Space>Li   * <Cmd>lua require('lvim.core.info').toggle_popup(vim.bo.filetype)<CR>
n  <Space>Lc   * <Cmd>edit /Users/quangtran/.config/lvim/config.lua<CR>
n  <Space>Lf   * <Cmd>lua require('lvim.core.telescope.custom-finders').find_lunarvim_files()<CR>
n  <Space>Lg   * <Cmd>lua require('lvim.core.telescope.custom-finders').grep_lunarvim_files()<CR>
n  <Space>Lu   * <Cmd>LvimUpdate<CR>
n  <Space>Lk   * <Cmd>Telescope keymaps<CR>
n  <Space>LI   * <Cmd>lua require('lvim.core.telescope.custom-finders').view_lunarvim_changelog()<CR>
n  <Space>Llp  * <Cmd>lua require('lvim.core.terminal').toggle_log_view('packer.nvim')<CR>
n  <Space>LlP  * <Cmd>exe 'edit '.stdpath('cache').'/packer.nvim.log'<CR>
n  <Space>LlL  * <Cmd>lua vim.fn.execute('edit ' .. vim.lsp.get_log_path())<CR>
n  <Space>Lln  * <Cmd>lua require('lvim.core.terminal').toggle_log_view(os.getenv('NVIM_LOG_FILE'))<CR>
n  <Space>Lld  * <Cmd>lua require('lvim.core.terminal').toggle_log_view(require('lvim.core.log').get_path())<CR>
n  <Space>LlD  * <Cmd>lua vim.fn.execute('edit ' .. require('lvim.core.log').get_path())<CR>
n  <Space>LlN  * <Cmd>edit $NVIM_LOG_FILE<CR>
n  <Space>Lll  * <Cmd>lua require('lvim.core.terminal').toggle_log_view(vim.lsp.get_log_path())<CR>
n  <Space>Lr   * <Cmd>LvimReload<CR>
n  <Space>/    * <Cmd>lua require('Comment.api').toggle_current_linewise()<CR>
n  <Space>sr   * <Cmd>Telescope oldfiles<CR>
n  <Space>sb   * <Cmd>Telescope git_branches<CR>
n  <Space>sc   * <Cmd>Telescope colorscheme<CR>
n  <Space>sM   * <Cmd>Telescope man_pages<CR>
n  <Space>st   * <Cmd>Telescope live_grep<CR>
n  <Space>sf   * <Cmd>Telescope find_files<CR>
n  <Space>sC   * <Cmd>Telescope commands<CR>
n  <Space>sp   * <Cmd>lua require('telescope.builtin.internal').colorscheme({enable_preview = true})<CR>
n  <Space>sR   * <Cmd>Telescope registers<CR>
n  <Space>sk   * <Cmd>Telescope keymaps<CR>
n  <Space>sh   * <Cmd>Telescope help_tags<CR>
n  <Space>gk   * <Cmd>lua require 'gitsigns'.prev_hunk()<CR>
n  <Space>go   * <Cmd>Telescope git_status<CR>
n  <Space>gb   * <Cmd>Telescope git_branches<CR>
n  <Space>gp   * <Cmd>lua require 'gitsigns'.preview_hunk()<CR>
n  <Space>gc   * <Cmd>Telescope git_commits<CR>
n  <Space>gC   * <Cmd>Telescope git_bcommits<CR>
n  <Space>gs   * <Cmd>lua require 'gitsigns'.stage_hunk()<CR>
n  <Space>gu   * <Cmd>lua require 'gitsigns'.undo_stage_hunk()<CR>
n  <Space>gd   * <Cmd>Gitsigns diffthis HEAD<CR>
n  <Space>gR   * <Cmd>lua require 'gitsigns'.reset_buffer()<CR>
n  <Space>gj   * <Cmd>lua require 'gitsigns'.next_hunk()<CR>
n  <Space>gl   * <Cmd>lua require 'gitsigns'.blame_line()<CR>
n  <Space>gr   * <Cmd>lua require 'gitsigns'.reset_hunk()<CR>
n  <Space>Ti   * :TSConfigInfo<CR>
n  <Space>li   * <Cmd>LspInfo<CR>
n  <Space>lw   * <Cmd>Telescope diagnostics<CR>
n  <Space>lf   * <Cmd>lua vim.lsp.buf.formatting()<CR>
n  <Space>lk   * <Cmd>lua vim.diagnostic.goto_prev()<CR>
n  <Space>lpd  * <Cmd>lua require('lvim.lsp.peek').Peek('definition')<CR>
n  <Space>lpt  * <Cmd>lua require('lvim.lsp.peek').Peek('typeDefinition')<CR>
n  <Space>lpi  * <Cmd>lua require('lvim.lsp.peek').Peek('implementation')<CR>
n  <Space>la   * <Cmd>lua require('lvim.core.telescope').code_actions()<CR>
n  <Space>lq   * <Cmd>lua vim.diagnostic.setloclist()<CR>
n  <Space>ld   * <Cmd>Telescope diagnostics bufnr=0 theme=get_ivy<CR>
n  <Space>ls   * <Cmd>Telescope lsp_document_symbols<CR>
n  <Space>lj   * <Cmd>lua vim.diagnostic.goto_next()<CR>
n  <Space>lI   * <Cmd>LspInstallInfo<CR>
n  <Space>ll   * <Cmd>lua vim.lsp.codelens.run()<CR>
n  <Space>lS   * <Cmd>Telescope lsp_dynamic_workspace_symbols<CR>
n  <Space>lr   * <Cmd>lua vim.lsp.buf.rename()<CR>
n  <Space>w    * <Cmd>w!<CR>
n  <Space>h    * <Cmd>nohlsearch<CR>
n  <Space>q    * <Cmd>q!<CR>
n  "           * <Cmd>lua require("which-key").show("\"", {mode = "n", auto = true})<CR>
o  %             <Plug>(MatchitOperationForward)
x  %             <Plug>(MatchitVisualForward)
n  %             <Plug>(MatchitNormalForward)
n  '           * <Cmd>lua require("which-key").show("'", {mode = "n", auto = true})<CR>
x  /Þ          * <Nop>
x  /           * <Cmd>lua require("which-key").show("/", {mode = "v", auto = true})<CR>
n  /Þ          * <Nop>
n  /           * <Cmd>lua require("which-key").show("/", {mode = "n", auto = true})<CR>
v  //          * v:count == 0 ? '<Cmd>lua require("Comment.api").call("toggle_current_blockwise_op")<CR>g@$' : '<Cmd>lua require("Comment.api").toggle_blockwise_count()<CR>'
n  //          * <Cmd>lua require('Comment.api').toggle_current_linewise()<CR>
v  <           * <gv
v  >           * >gv
n  @Þ          * <Nop>
n  @           * <Cmd>lua require("which-key").show("@", {mode = "n", auto = true})<CR>
n  H           * :BufferPrevious<CR>
x  J           * :move '>+1<CR>gv-gv
x  K           * :move '<-2<CR>gv-gv
n  L           * :BufferNext<CR>
n  Y           * y$
x  [Þ          * <Nop>
x  [           * <Cmd>lua require("which-key").show("[", {mode = "v", auto = true})<CR>
n  [Þ          * <Nop>
n  [           * <Cmd>lua require("which-key").show("[", {mode = "n", auto = true})<CR>
o  [%            <Plug>(MatchitOperationMultiBackward)
x  [%            <Plug>(MatchitVisualMultiBackward)
n  [%            <Plug>(MatchitNormalMultiBackward)
n  [q          * :cprev<CR>
n  \Þ          * <Nop>
n  \           * <Cmd>lua require("which-key").show("\\", {mode = "n", auto = true})<CR>
n  \4          * :BufferGoto 4<CR>
n  \5          * :BufferGoto 5<CR>
n  \2          * :BufferGoto 2<CR>
n  \1          * :BufferGoto 1<CR>
n  \p          * <Cmd>lua vim.lsp.buf.formatting()<CR>
n  \q          * :BufferClose<CR>
n  \3          * :BufferGoto 3<CR>
x  ]Þ          * <Nop>
x  ]           * <Cmd>lua require("which-key").show("]", {mode = "v", auto = true})<CR>
n  ]Þ          * <Nop>
n  ]           * <Cmd>lua require("which-key").show("]", {mode = "n", auto = true})<CR>
o  ]%            <Plug>(MatchitOperationMultiForward)
x  ]%            <Plug>(MatchitVisualMultiForward)
n  ]%            <Plug>(MatchitNormalMultiForward)
n  ]q          * :cnext<CR>
n  `           * <Cmd>lua require("which-key").show("`", {mode = "n", auto = true})<CR>
x  aÞ          * <Nop>
x  a           * <Cmd>lua require("which-key").show("a", {mode = "v", auto = true})<CR>
x  a%            <Plug>(MatchitVisualTextObject)
x  gb          * <Esc><Cmd>lua require("Comment.api").toggle_blockwise_op(vim.fn.visualmode())<CR>
x  gc          * <Esc><Cmd>lua require("Comment.api").toggle_linewise_op(vim.fn.visualmode())<CR>
n  gb          * <Cmd>lua require("Comment.api").call("toggle_blockwise_op")<CR>g@
n  gc          * <Cmd>lua require("Comment.api").call("toggle_linewise_op")<CR>g@
n  gbc         * v:count == 0 ? '<Cmd>lua require("Comment.api").call("toggle_current_blockwise_op")<CR>g@$' : '<Cmd>lua require("Comment.api").toggle_blockwise_count()<CR>'
n  gcc         * v:count == 0 ? '<Cmd>lua require("Comment.api").call("toggle_current_linewise_op")<CR>g@$' : '<Cmd>lua require("Comment.api").toggle_linewise_count()<CR>'
x  gÞ          * <Nop>
x  g           * <Cmd>lua require("which-key").show("g", {mode = "v", auto = true})<CR>
n  gÞ          * <Nop>
n  g           * <Cmd>lua require("which-key").show("g", {mode = "n", auto = true})<CR>
x  gx            <Plug>NetrwBrowseXVis
n  gx            <Plug>NetrwBrowseX
o  g%            <Plug>(MatchitOperationBackward)
x  g%            <Plug>(MatchitVisualBackward)
n  g%            <Plug>(MatchitNormalBackward)
x  iÞ          * <Nop>
x  i           * <Cmd>lua require("which-key").show("i", {mode = "v", auto = true})<CR>
n  zÞ          * <Nop>
n  z           * <Cmd>lua require("which-key").show("z", {mode = "n", auto = true})<CR>
s  <S-Tab>     * <Cmd>call v:lua.cmp.utils.keymap.set_map(22)<CR>
n  <Plug>PlenaryTestFile * :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))<CR>
n  <Plug>(nlsp-local-buf-config) * <Cmd>lua require('nlspsettings.command').open_local_buf_config()<CR>
n  <Plug>(nlsp-buf-config) * <Cmd>lua require('nlspsettings.command').open_buf_config()<CR>
s  <Plug>luasnip-jump-prev * <Cmd>lua require'luasnip'.jump(-1)<CR>
s  <Plug>luasnip-jump-next * <Cmd>lua require'luasnip'.jump(1)<CR>
s  <Plug>luasnip-prev-choice * <Cmd>lua require'luasnip'.change_choice(-1)<CR>
s  <Plug>luasnip-next-choice * <Cmd>lua require'luasnip'.change_choice(1)<CR>
s  <Plug>luasnip-expand-snippet * <Cmd>lua require'luasnip'.expand()<CR>
s  <Plug>luasnip-expand-or-jump * <Cmd>lua require'luasnip'.expand_or_jump()<CR>
   <Plug>luasnip-expand-repeat * <Cmd>lua require'luasnip'.expand_repeat()<CR>
   <Plug>luasnip-delete-check * <Cmd>lua require'luasnip'.unlink_current_if_deleted()<CR>
x  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<CR>
x  <Plug>(MatchitVisualTextObject)   <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
o  <Plug>(MatchitOperationMultiForward) * :<C-U>call matchit#MultiMatch("W",  "o")<CR>
o  <Plug>(MatchitOperationMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "o")<CR>
x  <Plug>(MatchitVisualMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
x  <Plug>(MatchitVisualMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
n  <Plug>(MatchitNormalMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>
n  <Plug>(MatchitNormalMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>
o  <Plug>(MatchitOperationBackward) * :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
o  <Plug>(MatchitOperationForward) * :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
x  <Plug>(MatchitVisualBackward) * :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
x  <Plug>(MatchitVisualForward) * :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``
n  <Plug>(MatchitNormalBackward) * :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
n  <Plug>(MatchitNormalForward) * :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
n  <C-Up>      * :resize -2<CR>
n  <M-Right>   * :vertical resize +2<CR>
n  <M-Left>    * :vertical resize -2<CR>
n  <M-Down>    * :resize +2<CR>
n  <M-Up>      * :resize -2<CR>
n  <M-k>       * :m .-2<CR>==
n  <M-j>       * :m .+1<CR>==
n  <C-Right>   * :vertical resize +2<CR>
n  <C-Left>    * :vertical resize -2<CR>
n  <C-Down>    * :resize +2<CR>
x  <M-j>       * :m '>+1<CR>gv-gv
x  <M-k>       * :m '<-2<CR>gv-gv
